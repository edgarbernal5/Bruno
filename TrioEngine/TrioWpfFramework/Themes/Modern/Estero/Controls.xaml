<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:themes="clr-namespace:TrioWpfFramework.Windows.Themes"
                    xmlns:ee="clr-namespace:TrioWpfFramework.Windows"
                    xmlns:control="clr-namespace:TrioWpfFramework.Controls">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Common.xaml" />
        <ResourceDictionary Source="../System/FocusVisual.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="Modern.ComboBox.Arrow" options:Freeze="True">M 0,2.5 L0,0.5 0,0.5 3.5,4 3.5,4 7,0.5 7,2.5 3.5,6 z</Geometry>

    <!--  Icon  -->
    <Style x:Key="Modern.Icon" TargetType="{x:Type control:Icon}">
        <Setter Property="EnabledOpacity" Value="{DynamicResource Icon.EnabledOpacity}" />
        <Setter Property="DisabledOpacity" Value="{DynamicResource Icon.DisabledOpacity}" />
        <Setter Property="Background" Value="{DynamicResource Icon.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Icon.Foreground}" />
    </Style>


    <!--  ColorDialog  -->
    <Style x:Key="Modern.ColorDialog" TargetType="{x:Type control:ColorDialog}">
        <Setter Property="Background" Value="{DynamicResource Dialog.Background}" />
    </Style>

    <DrawingBrush x:Key="CheckerBrush"
                  TileMode="Tile"
                  Viewport="0,0,10,10"
                  ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <!--  The whole tile background is white (100x100).  -->
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <!--  The upper left and lower left quarter is gray.  -->
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>


    <!--  ColorPicker  -->
    <Style TargetType="{x:Type control:ColorPicker}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:ColorPicker}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                        <WrapPanel>
                            <Grid Margin="0,0,11,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <StackPanel Grid.Row="0" Orientation="Horizontal">

                                    <!--  2D color area.  -->
                                    <control:ColorSlider2D x:Name="PART_Slider2D"
                                                      Width="189"
                                                      Height="189"
                                                      Margin="0,0,5,0"
                                                      ClipToBounds="True"
                                                      ToolTip="The 2D color field created by the complementary color components." />

                                    <!--  Vertical color slider next to the 2D color area.  -->
                                    <control:ColorSlider1D x:Name="PART_Slider1D"
                                                      Height="24"
                                                      ClipToBounds="True"
                                                      ToolTip="The color component (H, S, V, R, G or B) selected with the radio button.">
                                        <control:ColorSlider1D.LayoutTransform>
                                            <RotateTransform Angle="-90" />
                                        </control:ColorSlider1D.LayoutTransform>
                                    </control:ColorSlider1D>
                                </StackPanel>

                                <!--  Color preview area.  -->
                                <Grid Grid.Row="1"
                                      Margin="0,11,0,11"
                                      HorizontalAlignment="Stretch">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition MinHeight="24" />
                                        <RowDefinition MinHeight="24" />
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0"
                                               Grid.Column="1"
                                               Margin="2,0,7,4"
                                               HorizontalAlignment="Left">
                                        No Alpha:
                                    </TextBlock>
                                    <TextBlock Grid.Row="0"
                                               Grid.Column="2"
                                               Margin="2,0,7,4"
                                               HorizontalAlignment="Left">
                                        With Alpha:
                                    </TextBlock>
                                    <TextBlock Grid.Row="1"
                                               Grid.Column="0"
                                               Margin="0,0,7,0"
                                               HorizontalAlignment="Right"
                                               VerticalAlignment="Center">
                                        Old:
                                    </TextBlock>
                                    <TextBlock Grid.Row="2"
                                               Grid.Column="0"
                                               Margin="0,0,7,0"
                                               HorizontalAlignment="Right"
                                               VerticalAlignment="Center">
                                        New:
                                    </TextBlock>

                                    <Rectangle Grid.Row="1"
                                               Grid.RowSpan="2"
                                               Grid.Column="1"
                                               Grid.ColumnSpan="2"
                                               Fill="{StaticResource CheckerBrush}"
                                               SnapsToDevicePixels="True" />

                                    <Rectangle x:Name="PART_OldColorNoAlpha"
                                               Grid.Row="1"
                                               Grid.Column="1"
                                               SnapsToDevicePixels="True"
                                               ToolTip="The old color with Alpha set to 255." />
                                    <Rectangle x:Name="PART_OldColor"
                                               Grid.Row="1"
                                               Grid.Column="2"
                                               SnapsToDevicePixels="True"
                                               ToolTip="The old color." />
                                    <Button Grid.Row="1"
                                            Grid.Column="1"
                                            Grid.ColumnSpan="2"
                                            Command="control:ColorPickerCommands.ResetColor">
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <Border Background="Transparent" />
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                    <Rectangle x:Name="PART_NewColorNoAlpha"
                                               Grid.Row="2"
                                               Grid.Column="1"
                                               SnapsToDevicePixels="True"
                                               ToolTip="The new color with Alpha set to 255." />
                                    <Rectangle x:Name="PART_NewColor"
                                               Grid.Row="2"
                                               Grid.Column="2"
                                               SnapsToDevicePixels="True"
                                               ToolTip="The new color." />
                                </Grid>
                            </Grid>

                            <!--  Color components.  -->
                            <Grid Width="293" IsSharedSizeScope="True">
                                <StackPanel>
                                    <RadioButton x:Name="PART_ButtonH" ToolTip="The hue component in the range [0,360) or [0,1].">
                                        <control:ColorComponentControl x:Name="PART_H"
                                                                  Margin="0,0,0,5"
                                                                  Label="_H:"
                                                                  Maximum="360" />
                                    </RadioButton>
                                    <RadioButton x:Name="PART_ButtonS"
                                                 Margin="0,0,0,5"
                                                 ToolTip="The saturation component in the range [0,100] or [0,1].">
                                        <control:ColorComponentControl x:Name="PART_S"
                                                                  Label="_S:"
                                                                  Maximum="100" />
                                    </RadioButton>
                                    <RadioButton x:Name="PART_ButtonV"
                                                 Margin="0,0,0,11"
                                                 ToolTip="The value component in the range [0,100] or [0,1].">
                                        <control:ColorComponentControl x:Name="PART_V"
                                                                  Label="_V:"
                                                                  Maximum="100" />
                                    </RadioButton>

                                    <RadioButton x:Name="PART_ButtonR"
                                                 Margin="0,0,0,5"
                                                 ToolTip="The red component in the range [0,255] or [0,1].">
                                        <control:ColorComponentControl x:Name="PART_R" Label="_R:" />
                                    </RadioButton>
                                    <RadioButton x:Name="PART_ButtonG"
                                                 Margin="0,0,0,5"
                                                 ToolTip="The green component in the range [0,255] or [0,1].">
                                        <control:ColorComponentControl x:Name="PART_G" Label="_G:" />
                                    </RadioButton>
                                    <RadioButton x:Name="PART_ButtonB"
                                                 Margin="0,0,0,11"
                                                 ToolTip="The blue component in the range [0,255] or [0,1].">
                                        <control:ColorComponentControl x:Name="PART_B" Label="_B:" />
                                    </RadioButton>

                                    <control:ColorComponentControl x:Name="PART_A"
                                                              Width="274"
                                                              Margin="0,0,0,11"
                                                              HorizontalAlignment="Right"
                                                              Label="_A:"
                                                              ToolTip="The alpha (opacity) component in the range [0,255] or [0,1]." />

                                    <Grid Margin="13,0,0,0" ToolTip="The color in hexadecimal notation: #AARRGGBB.">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="ExtraLabelColumn" />
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="ExtraControlColumn" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <Label Grid.Column="0"
                                               Margin="0,0,-3,0"
                                               Content="He_xadecimal:  #"
                                               Target="{Binding ElementName=PART_HexValue}" />
                                        <TextBox x:Name="PART_HexValue"
                                                 Grid.Column="1"
                                                 Width="75"
                                                 Height="20"
                                                 Margin="3,0,0,0"
                                                 VerticalAlignment="Center"
                                                 VerticalContentAlignment="Center" />

                                        <Button x:Name="PART_EyeDropperButton"
                                                Grid.Column="2"
                                                Margin="4,0,0,0"
                                                HorizontalAlignment="Right"
                                                VerticalAlignment="Center"
                                                ToolTip="Click button to pick a color from anywhere on the screen.">
                                            <control:Icon Width="16"
                                                     Height="16"
                                                     Source="{x:Static themes:MultiColorGlyphs.EyeDropper}" />
                                        </Button>
                                    </Grid>
                                    <Grid Margin="13,0,0,0" ToolTip="Select the RGB color space (linear or sRGB). This setting affects which numeric values are displayed for red, green and blue.">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="ExtraLabelColumn" />
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="ExtraControlColumn" />
                                        </Grid.ColumnDefinitions>
                                        <Label Content="_Color space:" Target="{Binding ElementName=PART_ColorSpace}" />
                                        <ComboBox x:Name="PART_ColorSpace"
                                                  Grid.Column="1"
                                                  Width="75"
                                                  Height="21">
                                            <ComboBox.Items>
                                                <ComboBoxItem>Linear</ComboBoxItem>
                                                <ComboBoxItem>sRGB</ComboBoxItem>
                                            </ComboBox.Items>
                                        </ComboBox>
                                    </Grid>
                                </StackPanel>
                            </Grid>
                        </WrapPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DropDownButton  -->
    <Style x:Key="Modern.DropDownButton" TargetType="{x:Type control:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource Control.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Control.Static.Border}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource Modern.Control.FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:DropDownButton}">
                    <ToggleButton x:Name="PART_DropDownButton"
                                  ClickMode="Press"
                                  IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <ContentPresenter />
                            </ControlTemplate>
                        </ToggleButton.Template>
                        <Grid>
                            <Border x:Name="DropDownButtonChrome"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="ContentPresenter"
                                                      Margin="{TemplateBinding Padding}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <Path x:Name="Arrow"
                                          Grid.Column="1"
                                          Margin="4,0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="{StaticResource Modern.ComboBox.Arrow}"
                                          Fill="{DynamicResource Control.Static.Glyph}"
                                          SnapsToDevicePixels="True" />
                                </Grid>
                            </Border>
                        </Grid>
                    </ToggleButton>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.MouseOver.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                        </Trigger>
                        <Trigger SourceName="PART_DropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.Pressed.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                        </Trigger>
                        <Trigger SourceName="PART_DropDownButton" Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.Pressed.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.Disabled.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.Disabled.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Disabled.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SplitButton  -->
    <Style x:Key="Modern.SplitButton" TargetType="{x:Type control:SplitButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource Control.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Control.Static.Border}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource Modern.Control.FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:SplitButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Button x:Name="PART_ActionButton">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </Button.Template>
                            <Border x:Name="ActionButtonChrome"
                                    Margin="0,0,-1,0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="ContentPresenter"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Button>
                        <ToggleButton x:Name="PART_DropDownButton"
                                      Grid.Column="1"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Border x:Name="DropDownButtonChrome"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                <Path x:Name="Arrow"
                                      Margin="4,0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource Modern.ComboBox.Arrow}"
                                      Fill="{DynamicResource Control.Static.Glyph}"
                                      SnapsToDevicePixels="True" />
                            </Border>
                        </ToggleButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_ActionButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ActionButton" Property="Panel.ZIndex" Value="1" />
                            <Setter TargetName="ActionButtonChrome" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                            <Setter TargetName="ActionButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                        </Trigger>
                        <Trigger SourceName="PART_ActionButton" Property="IsPressed" Value="True">
                            <Setter TargetName="PART_ActionButton" Property="Panel.ZIndex" Value="1" />
                            <Setter TargetName="ActionButtonChrome" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="ActionButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                        </Trigger>
                        <Trigger SourceName="PART_DropDownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.MouseOver.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                        </Trigger>
                        <Trigger SourceName="PART_DropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.Pressed.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                        </Trigger>
                        <Trigger SourceName="PART_DropDownButton" Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.Pressed.Glyph}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Control.Disabled.Glyph}" />
                            <Setter TargetName="ActionButtonChrome" Property="Background" Value="{DynamicResource Control.Disabled.Background}" />
                            <Setter TargetName="ActionButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Disabled.Border}" />
                            <Setter TargetName="DropDownButtonChrome" Property="Background" Value="{DynamicResource Control.Disabled.Background}" />
                            <Setter TargetName="DropDownButtonChrome" Property="BorderBrush" Value="{DynamicResource Control.Disabled.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  FontDialog  -->
    <!--<Style x:Key="Modern.FontDialog" TargetType="{x:Type ee:FontDialog}">
        <Setter Property="Background" Value="{DynamicResource Dialog.Background}" />
    </Style>-->

    <Style x:Key="Modern.UpDownControl.UpButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource Control.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Control.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="Transparent"
                            Padding="1,1,1,0"
                            SnapsToDevicePixels="True">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="ContentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Modern.UpDownControl.DownButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource Control.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Control.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="Transparent"
                            Padding="1,0,1,1"
                            SnapsToDevicePixels="True">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="ContentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  BaseUpDownControl  -->
    <Style x:Key="Modern.BaseUpDownControl" TargetType="{x:Type control:BaseUpDownControl}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="2,2,17,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:BaseUpDownControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <TextBox Name="PART_Value"
                                 Grid.ColumnSpan="2"
                                 Background="{TemplateBinding Background}"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Focusable="{TemplateBinding Focusable}"
                                 Padding="{TemplateBinding Padding}"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 TextAlignment="Left">
                            <!--  Binding of Text property will be set in code.  -->
                        </TextBox>
                        <Grid Grid.Column="1"
                              Margin="0,1,1,1"
                              SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="1" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <RepeatButton Name="PART_Up"
                                          Grid.Row="0"
                                          Width="15"
                                          Padding="0,1,0,1"
                                          Style="{StaticResource Modern.UpDownControl.UpButton}"
                                          Visibility="Hidden">
                                <Path Name="UpArrow"
                                      Width="7"
                                      Height="4"
                                      Margin="0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource Modern.UpArrow}"
                                      Fill="{DynamicResource Control.Static.Glyph}"
                                      SnapsToDevicePixels="True"
                                      Stretch="Fill" />
                            </RepeatButton>
                            <RepeatButton Name="PART_Down"
                                          Grid.Row="2"
                                          Width="15"
                                          Padding="0,1,0,1"
                                          Style="{StaticResource Modern.UpDownControl.DownButton}"
                                          Visibility="Hidden">
                                <Path Name="DownArrow"
                                      Width="7"
                                      Height="4"
                                      Margin="0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource Modern.DownArrow}"
                                      Fill="{DynamicResource Control.Static.Glyph}"
                                      SnapsToDevicePixels="True"
                                      Stretch="Fill" />
                            </RepeatButton>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="PART_Down" Property="Background" Value="Transparent" />
                            <Setter TargetName="PART_Down" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="PART_Up" Property="Background" Value="Transparent" />
                            <Setter TargetName="PART_Up" Property="BorderBrush" Value="Transparent" />
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
                            <Setter TargetName="PART_Down" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Up" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="PART_Down" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Up" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="PART_Up" Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                            <Setter TargetName="UpArrow" Property="Fill" Value="{DynamicResource Control.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger SourceName="PART_Down" Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                            <Setter TargetName="DownArrow" Property="Fill" Value="{DynamicResource Control.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger SourceName="PART_Up" Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="UpArrow" Property="Fill" Value="{DynamicResource Control.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger SourceName="PART_Down" Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="DownArrow" Property="Fill" Value="{DynamicResource Control.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource Control.Disabled.Background}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Control.Disabled.Border}" />
                            <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                            <Setter TargetName="DownArrow" Property="Fill" Value="{DynamicResource Control.Disabled.Glyph}" />
                            <Setter TargetName="UpArrow" Property="Fill" Value="{DynamicResource Control.Disabled.Glyph}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  NumericUpDown  -->
    <Style x:Key="Modern.NumericUpDown"
           BasedOn="{StaticResource Modern.BaseUpDownControl}"
           TargetType="{x:Type control:NumericUpDown}" />

    <!--  TimeSpanUpDown  --><!--
    <Style x:Key="Modern.TimeSpanUpDown"
           BasedOn="{StaticResource Modern.BaseUpDownControl}"
           TargetType="{x:Type ee:TimeSpanUpDown}" />-->

    <!--  PropertyGrid  -->
    <control:PropertyGridTemplateSelector x:Key="PropertyGridTemplateSelector" />

    <Style x:Key="Modern.EmbeddedButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control.MouseOver.Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Control.Pressed.Background}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.Pressed.Border}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Pressed.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="Modern.WatermarkTemplate">
        <ContentControl Margin="2,0,2,0"
                        Content="{Binding}"
                        Focusable="False"
                        Foreground="Gray" />
    </DataTemplate>

    <!--  WatermarkedTextBox  -->
    <Style x:Key="Modern.WatermarkedTextBox" TargetType="{x:Type control:WatermarkedTextBox}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Padding" Value="2,1" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource Modern.WatermarkTemplate}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:WatermarkedTextBox}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden" />
                            <ContentPresenter x:Name="WatermarkHost"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Watermark}"
                                              ContentTemplate="{TemplateBinding WatermarkTemplate}"
                                              IsHitTestVisible="False"
                                              Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="WatermarkHost" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                    <Condition Property="IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  CommandTextBox  -->
    <Style x:Key="Modern.CommandTextBox" TargetType="{x:Type control:CommandTextBox}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Padding" Value="2,1" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource Modern.WatermarkTemplate}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:CommandTextBox}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="{TemplateBinding BorderThickness}"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden" />
                            <ContentPresenter x:Name="WatermarkHost"
                                              Grid.Column="0"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Watermark}"
                                              ContentTemplate="{TemplateBinding WatermarkTemplate}"
                                              IsHitTestVisible="False"
                                              Visibility="Collapsed" />
                            <Button Grid.Column="1"
                                    Margin="0,-1,-1,-1"
                                    Command="{TemplateBinding Command}"
                                    Content="{TemplateBinding ButtonContent}"
                                    IsTabStop="False"
                                    Style="{StaticResource Modern.EmbeddedButton}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="WatermarkHost" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Control.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExplorerViewMenu  -->
    <Style x:Key="Modern.ExplorerViewMenu" TargetType="{x:Type control:ExplorerViewMenu}">
        <Setter Property="Background" Value="{DynamicResource Menu.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Menu.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
        <Setter Property="ImageSourceDetails" Value="{x:Static themes:MultiColorGlyphs.ViewDetails}" />
        <Setter Property="ImageSourceExtraLargeIcons" Value="{x:Static themes:MultiColorGlyphs.ViewExtraLargeIcons}" />
        <Setter Property="ImageSourceLargeIcons" Value="{x:Static themes:MultiColorGlyphs.ViewLargeIcons}" />
        <Setter Property="ImageSourceList" Value="{x:Static themes:MultiColorGlyphs.ViewList}" />
        <Setter Property="ImageSourceMediumIcons" Value="{x:Static themes:MultiColorGlyphs.ViewMediumIcons}" />
        <Setter Property="ImageSourceSmallIcons" Value="{x:Static themes:MultiColorGlyphs.ViewSmallIcons}" />
        <Setter Property="ImageSourceTiles" Value="{x:Static themes:MultiColorGlyphs.ViewTiles}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="StringDetails" Value="Details" />
        <Setter Property="StringExtraLargeIcons" Value="Extra Large Icons" />
        <Setter Property="StringLargeIcons" Value="Large Icons" />
        <Setter Property="StringList" Value="List" />
        <Setter Property="StringMediumIcons" Value="Medium Icons" />
        <Setter Property="StringSmallIcons" Value="Small Icons" />
        <Setter Property="StringTiles" Value="Tiles" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:ExplorerViewMenu}">
                    <aero:SystemDropShadowChrome Name="Shadow"
                                                 SnapsToDevicePixels="True"
                                                 Color="Transparent">
                        <Border Name="ContextMenuBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Rectangle Width="1"
                                           Margin="30,2,0,2"
                                           HorizontalAlignment="Left"
                                           Fill="{DynamicResource Menu.Static.Separator}" />
                                <ScrollViewer Margin="32,0,2,0"
                                              CanContentScroll="True"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                    <StackPanel Margin="{TemplateBinding Padding}"
                                                IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                                <Slider Name="PART_ViewSlider"
                                        Margin="6,12,0,12"
                                        HorizontalAlignment="Left"
                                        Foreground="Transparent"
                                        IsMoveToPointEnabled="True"
                                        IsSnapToTickEnabled="True"
                                        Maximum="222"
                                        Minimum="0"
                                        Orientation="Vertical"
                                        SmallChange="4"
                                        TickPlacement="BottomRight"
                                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SliderPosition}">
                                    <Slider.Ticks>
                                        0, 36, 72,
                                        108, 116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,
                                        148, 155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,
                                        178, 184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,
                                        222
                                    </Slider.Ticks>
                                </Slider>
                            </Grid>
                        </Border>
                    </aero:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Color" Value="#71000000" />
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ListView (ExplorerView)  -->
    <Style x:Key="Modern.ExplorerView" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="Padding" Value="1,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TextBox.Static.Background}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=View.Mode}" Value="ExtraLargeIcons">
                <Setter Property="ItemTemplate" Value="{Binding View.IconTemplate, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemTemplateSelector" Value="{Binding View.IconTemplateSelector, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=View.Mode}" Value="LargeIcons">
                <Setter Property="ItemTemplate" Value="{Binding View.IconTemplate, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemTemplateSelector" Value="{Binding View.IconTemplateSelector, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=View.Mode}" Value="MediumIcons">
                <Setter Property="ItemTemplate" Value="{Binding View.IconTemplate, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemTemplateSelector" Value="{Binding View.IconTemplateSelector, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=View.Mode}" Value="SmallIcons">
                <Setter Property="ItemTemplate" Value="{Binding View.IconTemplate, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemTemplateSelector" Value="{Binding View.IconTemplateSelector, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=View.Mode}" Value="List">
                <Setter Property="ItemTemplate" Value="{Binding View.ListTemplate, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemTemplateSelector" Value="{Binding View.ListTemplateSelector, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=View.Mode}" Value="Tiles">
                <Setter Property="ItemTemplate" Value="{Binding View.TileTemplate, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemTemplateSelector" Value="{Binding View.TileTemplateSelector, RelativeSource={RelativeSource Self}}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="Modern.ExplorerView.DefaultListViewItem" TargetType="{x:Type ListViewItem}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Item.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Item.SelectedInactive.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Item.SelectedInactive.Border}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Modern.ExplorerView.DetailsListViewItem" TargetType="{x:Type ListViewItem}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True">
            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Item.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Item.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Item.SelectedInactive.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Item.SelectedInactive.Border}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Modern.ExplorerView.FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="{DynamicResource Item.SelectedActive.Border}" StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ListViewItem (ExplorerView)  -->
    <Style x:Key="Modern.ExplorerViewItem" TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource Modern.ExplorerView.FocusVisual}" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="Template" Value="{StaticResource Modern.ExplorerView.DefaultListViewItem}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Value="Details">
                <DataTrigger.Binding>
                    <PriorityBinding>
                        <!--
                            Wrap binding in PriorityBinding.
                            This is necessary because the ListView-ancestor cannot always be resolved.
                            (For example: When the ListViewItem is created it does not have an ancestor until it is
                            connected to the visual tree.)
                            Generally this is not a problem, but failed bindings are logged to the Visual Studio Output Window:
                            System.Windows.Data Error: 4 : Cannot find source for binding ...
                            
                            When we use a PriorityBinding the failed bindings are logged as warnings instead of errors:
                            System.Windows.Data Warning: 4 : Cannot find source for binding ...
                            
                            Warnings are acceptable!
                        -->
                        <Binding Path="View.Mode" RelativeSource="{RelativeSource AncestorType={x:Type ListView}}" />
                    </PriorityBinding>
                </DataTrigger.Binding>
                <Setter Property="Template" Value="{StaticResource Modern.ExplorerView.DetailsListViewItem}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>

